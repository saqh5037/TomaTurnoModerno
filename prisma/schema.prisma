generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int           @id @default(autoincrement())
  name              String
  role              String
  password          String
  username          String        @unique
  createdAt         DateTime      @default(now())
  email             String?
  failedAttempts    Int           @default(0)
  isActive          Boolean       @default(true)
  status            UserStatus    @default(ACTIVE)
  lastLogin         DateTime?
  lockedUntil       DateTime?
  passwordChangedAt DateTime?
  phone             String?
  updatedAt         DateTime      @updatedAt
  auditLogs         AuditLog[]
  sessions          Session[]
  turnRequests      TurnRequest[] @relation("UserTurnRequests")
  suggestedTurns    TurnRequest[] @relation("SuggestedTurnRequests")

  @@index([isActive])
  @@index([status])
  @@index([lastLogin])
  @@index([role])
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

model TurnRequest {
  id            Int       @id @default(autoincrement())
  patientName   String
  age           Int
  gender        String
  contactInfo   String?
  studies       String
  tubesRequired Int                        // Mantener para compatibilidad (se calcula automáticamente desde tubesDetails)
  tubesDetails  Json?                      // NUEVO: Array detallado de tubos [{ type: "sst", quantity: 2 }]
  observations  String?
  clinicalInfo  String?
  status        String    @default("Pending")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  assignedTurn  Int?
  attendedAt    DateTime?
  attendedBy    Int?
  calledAt      DateTime?
  tipoAtencion  String    @default("General")
  cubicleId     Int?
  isCalled      Boolean   @default(false)
  finishedAt    DateTime?
  callCount     Int       @default(0)      // Contador de veces que se ha llamado al paciente
  isDeferred    Boolean   @default(false)  // Indica si es una toma diferida (regresado a cola)
  deferredAt    DateTime?                  // Timestamp de cuando se difirió (para ordenamiento correcto)
  suggestedFor  Int?                       // ID del flebotomista al que se sugiere este paciente
  suggestedAt   DateTime?                  // Timestamp de cuando se hizo la sugerencia (para timeout)
  user          User?     @relation("UserTurnRequests", fields: [attendedBy], references: [id])
  suggestedUser User?     @relation("SuggestedTurnRequests", fields: [suggestedFor], references: [id])
  cubicle       Cubicle?  @relation("TurnRequestToCubicle", fields: [cubicleId], references: [id])

  @@index([status])
  @@index([isCalled])
  @@index([status, isCalled])
  @@index([attendedBy])
  @@index([createdAt])
  @@index([finishedAt])
  @@index([assignedTurn])
  @@index([status, assignedTurn])
  @@index([isDeferred])
  @@index([status, isDeferred])
  @@index([deferredAt])
  @@index([suggestedFor])
  @@index([status, suggestedFor])
}

model Cubicle {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  isSpecial    Boolean       @default(false)
  type         CubicleType
  isActive     Boolean       @default(true) // Estado activo/inactivo del cubículo
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  turnRequests TurnRequest[] @relation("TurnRequestToCubicle")

  @@index([isActive]) // Índice para consultas por estado
}

model Session {
  id                 Int      @id @default(autoincrement())
  userId             Int
  token              String
  ipAddress          String?
  userAgent          String?
  createdAt          DateTime @default(now())
  expiresAt          DateTime
  lastActivity       DateTime @default(now())
  refreshToken       String?
  selectedCubicleId  Int?     // Cubículo seleccionado por el usuario en esta sesión
  user               User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@index([selectedCubicleId])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  entity    String
  entityId  Int?
  oldValue  Json?
  newValue  Json?
  ipAddress String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model SatisfactionSurvey {
  id        Int      @id @default(autoincrement())
  turnId    Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

enum CubicleType {
  GENERAL
  SPECIAL
}

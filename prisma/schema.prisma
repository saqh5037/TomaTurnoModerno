generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int           @id @default(autoincrement())
  username          String        @unique
  password          String
  name              String
  role              String
  email             String?
  phone             String?
  isActive          Boolean       @default(true)
  lastLogin         DateTime?
  passwordChangedAt DateTime?
  failedAttempts    Int           @default(0)
  lockedUntil       DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  sessions                Session[]
  auditLogs              AuditLog[]
  turnRequests           TurnRequest[] @relation("UserTurnRequests")
  documentationEvents    DocumentationEvent[]
  documentationBookmarks DocumentationBookmark[]
  documentationFeedback  DocumentationFeedback[]
  faqVotes              FAQVote[]

  @@index([isActive])
  @@index([lastLogin])
  @@index([role])
}

model TurnRequest {
  id            Int       @id @default(autoincrement())
  patientName   String
  age           Int
  gender        String
  contactInfo   String?
  studies       String
  tubesRequired Int
  observations  String?
  clinicalInfo  String?
  status        String    @default("Pending")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  assignedTurn  Int?
  attendedAt    DateTime?
  attendedBy    Int?
  calledAt      DateTime?
  tipoAtencion  String    @default("General")
  cubicleId     Int?
  isCalled      Boolean   @default(false)
  finishedAt    DateTime?
  user          User?     @relation("UserTurnRequests", fields: [attendedBy], references: [id])
  cubicle       Cubicle?  @relation("TurnRequestToCubicle", fields: [cubicleId], references: [id])

  @@index([status])
  @@index([isCalled])
  @@index([status, isCalled])
  @@index([attendedBy])
  @@index([createdAt])
  @@index([finishedAt])
  @@index([assignedTurn])
  @@index([status, assignedTurn])
}

model Cubicle {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  isSpecial    Boolean       @default(false)
  type         CubicleType
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  turnRequests TurnRequest[] @relation("TurnRequestToCubicle")
}

enum CubicleType {
  GENERAL
  SPECIAL
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  token        String   @db.Text
  refreshToken String?  @db.Text
  ipAddress    String?
  userAgent    String?  @db.Text
  lastActivity DateTime @default(now())
  createdAt    DateTime @default(now())
  expiresAt    DateTime

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  action    String
  entity    String
  entityId  Int?
  oldValue  Json?
  newValue  Json?
  ipAddress String?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model SatisfactionSurvey {
  id           Int      @id @default(autoincrement())
  turnId       Int
  rating       Int
  comment      String?
  createdAt    DateTime @default(now())
}

// Documentation Module Models
model DocumentationModule {
  id            Int      @id @default(autoincrement())
  moduleId      String   @unique
  title         String
  description   String?
  category      String   // admin, flebotomista, usuario, common
  content       Json     // Contenido estructurado
  order         Int
  isActive      Boolean  @default(true)
  views         Int      @default(0)
  avgRating     Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  events        DocumentationEvent[]
  bookmarks     DocumentationBookmark[]

  @@index([category])
  @@index([moduleId])
  @@index([isActive])
  @@index([order])
}

model DocumentationEvent {
  id            Int      @id @default(autoincrement())
  eventType     String   // page_view, search, video_play, pdf_download, etc
  moduleId      String?
  userId        Int?
  userRole      String?
  metadata      Json?    // Datos espec√≠ficos del evento
  sessionId     String?
  ipAddress     String?
  userAgent     String?
  timestamp     DateTime @default(now())

  user          User?    @relation(fields: [userId], references: [id])
  module        DocumentationModule? @relation(fields: [moduleId], references: [moduleId])

  @@index([eventType])
  @@index([userId])
  @@index([moduleId])
  @@index([timestamp])
  @@index([userRole])
  @@index([sessionId])
}

model DocumentationBookmark {
  id            Int      @id @default(autoincrement())
  userId        Int
  moduleId      String
  notes         String?
  createdAt     DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id])
  module        DocumentationModule @relation(fields: [moduleId], references: [moduleId])

  @@unique([userId, moduleId])
  @@index([userId])
  @@index([moduleId])
}

model DocumentationFeedback {
  id            Int      @id @default(autoincrement())
  userId        Int?
  moduleId      String?
  rating        Int      // 1-5
  comment       String?
  isHelpful     Boolean?
  category      String?  // bug, suggestion, praise, question
  status        String   @default("pending") // pending, reviewed, resolved
  response      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User?    @relation(fields: [userId], references: [id])

  @@index([moduleId])
  @@index([status])
  @@index([category])
  @@index([rating])
  @@index([createdAt])
}

model FAQVote {
  id            Int      @id @default(autoincrement())
  faqId         String
  userId        Int?
  isHelpful     Boolean
  createdAt     DateTime @default(now())

  user          User?    @relation(fields: [userId], references: [id])

  @@unique([faqId, userId])
  @@index([faqId])
  @@index([isHelpful])
}

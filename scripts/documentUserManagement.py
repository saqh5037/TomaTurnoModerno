#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script para documentar COMPLETAMENTE el m√≥dulo de Gesti√≥n de Usuarios
Cubre: Crear, Editar, Ver detalles, Cambiar estado, Buscar, Filtrar
"""

import os
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options

BASE_URL = "http://localhost:3005"
SCREENSHOT_DIR = "/Users/samuelquiroz/Documents/proyectos/toma-turno/public/docs/screenshots/users"

# Asegurar que existe el directorio
os.makedirs(SCREENSHOT_DIR, exist_ok=True)

class UserManagementDocumentation:
    def __init__(self):
        options = Options()
        options.add_argument("--window-size=1920,1080")
        options.add_argument("--force-device-scale-factor=1")
        self.driver = webdriver.Chrome(options=options)
        self.wait = WebDriverWait(self.driver, 10)
        self.screenshots = []
        self.step_number = 1

    def capture(self, filename, title, description):
        """Captura un screenshot con metadata detallada"""
        filepath = os.path.join(SCREENSHOT_DIR, filename)
        self.driver.save_screenshot(filepath)

        file_size = os.path.getsize(filepath)
        size_kb = file_size / 1024

        self.screenshots.append({
            'step': self.step_number,
            'filename': filename,
            'title': title,
            'description': description,
            'path': f"/docs/screenshots/users/{filename}",
            'size': f"{size_kb:.1f} KB"
        })

        print(f"  [{self.step_number}] üì∏ {title}")
        print(f"      {description}")
        print(f"      üíæ {filename} ({size_kb:.1f} KB)\n")

        self.step_number += 1

    def login(self):
        """Login como admin"""
        print("\nüîê === PASO 1: INICIO DE SESI√ìN ===\n")
        self.driver.get(f"{BASE_URL}/login")
        time.sleep(2)

        self.capture(
            "step01-login-page.png",
            "P√°gina de inicio de sesi√≥n",
            "La p√°gina de login es el punto de entrada al sistema. Aqu√≠ los usuarios ingresan sus credenciales."
        )

        # Llenar formulario de login
        username_field = self.driver.find_elements(By.TAG_NAME, "input")[0]
        password_field = self.driver.find_elements(By.TAG_NAME, "input")[1]

        username_field.send_keys("admin")
        time.sleep(0.5)

        self.capture(
            "step02-username-entered.png",
            "Usuario ingresado",
            "Se ingresa el nombre de usuario 'admin' en el campo de usuario."
        )

        password_field.send_keys("123")
        time.sleep(0.5)

        self.capture(
            "step03-password-entered.png",
            "Contrase√±a ingresada",
            "Se ingresa la contrase√±a en el campo correspondiente (se muestra oculta por seguridad)."
        )

        submit_btn = self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
        submit_btn.click()
        time.sleep(3)

        self.capture(
            "step04-dashboard-after-login.png",
            "Dashboard despu√©s del login",
            "Despu√©s de autenticarse exitosamente, el usuario es redirigido al dashboard principal del sistema."
        )

    def navigate_to_users(self):
        """Navegar al m√≥dulo de usuarios"""
        print("\nüë• === PASO 2: NAVEGACI√ìN AL M√ìDULO DE USUARIOS ===\n")

        self.driver.get(f"{BASE_URL}/users")
        time.sleep(3)

        self.capture(
            "step05-users-list-initial.png",
            "Vista inicial del m√≥dulo de usuarios",
            "El m√≥dulo de Gesti√≥n de Usuarios muestra una tabla con todos los usuarios del sistema, incluyendo su nombre, usuario, rol y estado."
        )

        # Scroll para ver toda la tabla
        self.driver.execute_script("window.scrollTo(0, 300)")
        time.sleep(1)

        self.capture(
            "step06-users-list-scrolled.png",
            "Lista completa de usuarios",
            "Vista completa de la tabla de usuarios mostrando todos los campos: nombre completo, nombre de usuario, rol (Admin/Flebotomista) y estado (ACTIVE/INACTIVE/BLOCKED)."
        )

        # Volver arriba
        self.driver.execute_script("window.scrollTo(0, 0)")
        time.sleep(1)

    def create_new_user_flow(self):
        """Flujo completo de creaci√≥n de usuario"""
        print("\n‚ûï === PASO 3: CREAR NUEVO USUARIO ===\n")

        # Click en bot√≥n "Crear Usuario"
        try:
            create_btn = self.wait.until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Crear Usuario')]"))
            )
            create_btn.click()
            time.sleep(2)

            self.capture(
                "step07-create-user-modal.png",
                "Modal de creaci√≥n de usuario",
                "Al hacer clic en 'Crear Usuario', se abre un modal con el formulario para ingresar los datos del nuevo usuario."
            )

            # Llenar formulario paso a paso

            # 1. Nombre completo
            name_input = self.driver.find_element(By.ID, "name")
            name_input.send_keys("Mar√≠a Gonz√°lez L√≥pez")
            time.sleep(0.5)

            self.capture(
                "step08-name-entered.png",
                "Nombre completo ingresado",
                "Se ingresa el nombre completo del usuario: 'Mar√≠a Gonz√°lez L√≥pez'. Este campo es obligatorio."
            )

            # 2. Nombre de usuario
            username_input = self.driver.find_element(By.ID, "username")
            username_input.send_keys("maria.gonzalez")
            time.sleep(0.5)

            self.capture(
                "step09-username-entered.png",
                "Nombre de usuario ingresado",
                "Se ingresa el nombre de usuario √∫nico: 'maria.gonzalez'. Este ser√° el usuario para iniciar sesi√≥n."
            )

            # 3. Contrase√±a
            password_input = self.driver.find_element(By.ID, "password")
            password_input.send_keys("Maria2024!")
            time.sleep(0.5)

            self.capture(
                "step10-password-entered.png",
                "Contrase√±a ingresada",
                "Se ingresa una contrase√±a segura para el usuario. Debe tener al menos 6 caracteres."
            )

            # 4. Seleccionar rol
            role_select = self.driver.find_element(By.ID, "role")
            role_select.click()
            time.sleep(0.5)

            self.capture(
                "step11-role-dropdown-open.png",
                "Selector de rol desplegado",
                "Se despliega el selector de rol mostrando las opciones: Admin y Flebotomista."
            )

            # Seleccionar Flebotomista
            flebotomista_option = self.driver.find_element(By.XPATH, "//option[@value='Flebotomista']")
            flebotomista_option.click()
            time.sleep(0.5)

            self.capture(
                "step12-role-selected.png",
                "Rol seleccionado: Flebotomista",
                "Se selecciona el rol 'Flebotomista' para este usuario. Los flebotomistas tienen permisos limitados para atenci√≥n de pacientes."
            )

            # 5. Seleccionar estado
            status_select = self.driver.find_element(By.ID, "status")
            status_select.click()
            time.sleep(0.5)

            self.capture(
                "step13-status-dropdown-open.png",
                "Selector de estado desplegado",
                "Se despliega el selector de estado mostrando las opciones: ACTIVE, INACTIVE y BLOCKED."
            )

            # Seleccionar ACTIVE
            active_option = self.driver.find_element(By.XPATH, "//option[@value='ACTIVE']")
            active_option.click()
            time.sleep(0.5)

            self.capture(
                "step14-status-selected.png",
                "Estado seleccionado: ACTIVE",
                "Se selecciona el estado 'ACTIVE' para que el usuario pueda iniciar sesi√≥n inmediatamente."
            )

            # Formulario completo
            self.capture(
                "step15-form-complete.png",
                "Formulario completo listo para guardar",
                "Todos los campos del formulario est√°n llenos y validados. Ahora se puede guardar el nuevo usuario."
            )

            # Click en guardar
            save_btn = self.driver.find_element(By.XPATH, "//button[contains(text(), 'Guardar')]")
            save_btn.click()
            time.sleep(2)

            self.capture(
                "step16-user-created-success.png",
                "Usuario creado exitosamente",
                "El sistema muestra un mensaje de confirmaci√≥n y el nuevo usuario aparece en la lista."
            )

        except Exception as e:
            print(f"‚ö†Ô∏è  Error en creaci√≥n: {str(e)}")
            self.capture(
                "error-create-user.png",
                "Error en creaci√≥n",
                f"Se encontr√≥ un error: {str(e)}"
            )

    def search_user_flow(self):
        """Flujo de b√∫squeda de usuario"""
        print("\nüîç === PASO 4: BUSCAR USUARIO ===\n")

        time.sleep(2)

        # Buscar el campo de b√∫squeda
        try:
            search_input = self.driver.find_element(By.XPATH, "//input[@placeholder='Buscar por nombre o usuario...']")

            self.capture(
                "step17-search-field.png",
                "Campo de b√∫squeda",
                "El m√≥dulo incluye un campo de b√∫squeda para filtrar usuarios por nombre o nombre de usuario."
            )

            # Escribir en b√∫squeda
            search_input.send_keys("Mar√≠a")
            time.sleep(1)

            self.capture(
                "step18-search-results.png",
                "Resultados de b√∫squeda",
                "Al escribir 'Mar√≠a', la tabla se filtra autom√°ticamente mostrando solo los usuarios que coinciden con el criterio."
            )

            # Limpiar b√∫squeda
            search_input.clear()
            time.sleep(1)

        except Exception as e:
            print(f"‚ö†Ô∏è  No se encontr√≥ campo de b√∫squeda: {str(e)}")

    def edit_user_flow(self):
        """Flujo completo de edici√≥n de usuario"""
        print("\n‚úèÔ∏è  === PASO 5: EDITAR USUARIO ===\n")

        time.sleep(2)

        try:
            # Buscar bot√≥n de editar (primer usuario de Mar√≠a)
            edit_buttons = self.driver.find_elements(By.XPATH, "//button[contains(@aria-label, 'Editar')]")

            if len(edit_buttons) > 0:
                # Scroll al bot√≥n
                self.driver.execute_script("arguments[0].scrollIntoView(true);", edit_buttons[0])
                time.sleep(1)

                self.capture(
                    "step19-edit-button-highlighted.png",
                    "Bot√≥n de editar",
                    "Cada usuario tiene un bot√≥n de editar (√≠cono de l√°piz) que permite modificar su informaci√≥n."
                )

                edit_buttons[0].click()
                time.sleep(2)

                self.capture(
                    "step20-edit-modal-open.png",
                    "Modal de edici√≥n abierto",
                    "Se abre el modal de edici√≥n con los datos actuales del usuario precargados en los campos."
                )

                # Modificar nombre
                name_input = self.driver.find_element(By.ID, "name")
                name_input.clear()
                name_input.send_keys("Mar√≠a Gonz√°lez L√≥pez - Editada")
                time.sleep(0.5)

                self.capture(
                    "step21-name-modified.png",
                    "Nombre modificado",
                    "Se modifica el nombre del usuario agregando ' - Editada' al final para demostrar la edici√≥n."
                )

                # Cambiar rol a Admin
                role_select = self.driver.find_element(By.ID, "role")
                role_select.click()
                time.sleep(0.5)

                admin_option = self.driver.find_element(By.XPATH, "//option[@value='Admin']")
                admin_option.click()
                time.sleep(0.5)

                self.capture(
                    "step22-role-changed-to-admin.png",
                    "Rol cambiado a Admin",
                    "Se cambia el rol del usuario de 'Flebotomista' a 'Admin', otorg√°ndole permisos completos en el sistema."
                )

                # Guardar cambios
                save_btn = self.driver.find_element(By.XPATH, "//button[contains(text(), 'Guardar')]")
                save_btn.click()
                time.sleep(2)

                self.capture(
                    "step23-user-edited-success.png",
                    "Usuario editado exitosamente",
                    "Los cambios se guardan correctamente y se muestra un mensaje de confirmaci√≥n. La tabla se actualiza con los nuevos datos."
                )

        except Exception as e:
            print(f"‚ö†Ô∏è  Error en edici√≥n: {str(e)}")

    def change_user_status_flow(self):
        """Flujo de cambio de estado de usuario"""
        print("\nüîÑ === PASO 6: CAMBIAR ESTADO DE USUARIO ===\n")

        time.sleep(2)

        try:
            # Buscar men√∫ de opciones del usuario
            menu_buttons = self.driver.find_elements(By.XPATH, "//button[contains(@aria-label, 'Opciones')]")

            if len(menu_buttons) > 0:
                self.driver.execute_script("arguments[0].scrollIntoView(true);", menu_buttons[0])
                time.sleep(1)

                self.capture(
                    "step24-options-menu-button.png",
                    "Bot√≥n de men√∫ de opciones",
                    "Cada usuario tiene un bot√≥n de men√∫ (tres puntos) que despliega opciones adicionales."
                )

                menu_buttons[0].click()
                time.sleep(1)

                self.capture(
                    "step25-options-menu-open.png",
                    "Men√∫ de opciones desplegado",
                    "El men√∫ muestra opciones como: Cambiar a INACTIVE, Cambiar a BLOCKED, Ver detalles, etc."
                )

                # Click en cambiar a INACTIVE
                inactive_option = self.driver.find_element(By.XPATH, "//button[contains(text(), 'INACTIVE')]")
                inactive_option.click()
                time.sleep(2)

                self.capture(
                    "step26-confirm-inactive-dialog.png",
                    "Di√°logo de confirmaci√≥n",
                    "Se muestra un di√°logo de confirmaci√≥n para asegurar que el usuario desea cambiar el estado."
                )

                # Confirmar
                confirm_btn = self.driver.find_element(By.XPATH, "//button[contains(text(), 'Confirmar')]")
                confirm_btn.click()
                time.sleep(2)

                self.capture(
                    "step27-user-status-changed.png",
                    "Estado cambiado a INACTIVE",
                    "El estado del usuario cambia a INACTIVE. Los usuarios inactivos no pueden iniciar sesi√≥n en el sistema."
                )

        except Exception as e:
            print(f"‚ö†Ô∏è  Error en cambio de estado: {str(e)}")

    def block_user_flow(self):
        """Flujo de bloqueo de usuario"""
        print("\nüö´ === PASO 7: BLOQUEAR USUARIO ===\n")

        time.sleep(2)

        try:
            # Abrir men√∫ de opciones nuevamente
            menu_buttons = self.driver.find_elements(By.XPATH, "//button[contains(@aria-label, 'Opciones')]")

            if len(menu_buttons) > 0:
                menu_buttons[0].click()
                time.sleep(1)

                self.capture(
                    "step28-menu-for-block.png",
                    "Men√∫ de opciones para bloquear",
                    "Se abre nuevamente el men√∫ para seleccionar la opci√≥n de bloqueo permanente."
                )

                # Click en BLOCKED
                blocked_option = self.driver.find_element(By.XPATH, "//button[contains(text(), 'BLOCKED')]")
                blocked_option.click()
                time.sleep(2)

                self.capture(
                    "step29-confirm-block-dialog.png",
                    "Confirmaci√≥n de bloqueo",
                    "El sistema solicita confirmaci√≥n para el bloqueo. BLOCKED es un estado permanente y m√°s restrictivo que INACTIVE."
                )

                # Confirmar bloqueo
                confirm_btn = self.driver.find_element(By.XPATH, "//button[contains(text(), 'Confirmar')]")
                confirm_btn.click()
                time.sleep(2)

                self.capture(
                    "step30-user-blocked.png",
                    "Usuario bloqueado exitosamente",
                    "El usuario ahora est√° en estado BLOCKED (color rojo). No puede iniciar sesi√≥n y requiere intervenci√≥n de un administrador para reactivarse."
                )

        except Exception as e:
            print(f"‚ö†Ô∏è  Error en bloqueo: {str(e)}")

    def view_user_details_flow(self):
        """Flujo de visualizaci√≥n de detalles"""
        print("\nüëÅÔ∏è  === PASO 8: VER DETALLES DE USUARIO ===\n")

        time.sleep(2)

        try:
            # Click en alg√∫n usuario para ver detalles
            user_rows = self.driver.find_elements(By.XPATH, "//tr[contains(@class, 'cursor-pointer')]")

            if len(user_rows) > 0:
                self.driver.execute_script("arguments[0].scrollIntoView(true);", user_rows[0])
                time.sleep(1)

                self.capture(
                    "step31-user-row-clickable.png",
                    "Fila de usuario clickeable",
                    "Cada fila de usuario es clickeable para ver los detalles completos."
                )

                user_rows[0].click()
                time.sleep(2)

                self.capture(
                    "step32-user-details-modal.png",
                    "Modal de detalles de usuario",
                    "Se muestra un modal con todos los detalles del usuario: informaci√≥n personal, rol, permisos, estado, fecha de creaci√≥n y √∫ltimo acceso."
                )

                # Cerrar modal
                close_btn = self.driver.find_element(By.XPATH, "//button[contains(@aria-label, 'Cerrar')]")
                close_btn.click()
                time.sleep(1)

        except Exception as e:
            print(f"‚ö†Ô∏è  Error en detalles: {str(e)}")

    def filter_by_role_flow(self):
        """Flujo de filtrado por rol"""
        print("\nüîΩ === PASO 9: FILTRAR POR ROL ===\n")

        time.sleep(2)

        try:
            # Buscar filtro de rol
            role_filter = self.driver.find_element(By.XPATH, "//select[contains(@aria-label, 'Filtrar por rol')]")

            self.capture(
                "step33-role-filter.png",
                "Filtro por rol",
                "El m√≥dulo incluye un filtro para ver solo usuarios de un rol espec√≠fico."
            )

            role_filter.click()
            time.sleep(0.5)

            # Seleccionar Admin
            admin_filter = self.driver.find_element(By.XPATH, "//option[@value='Admin']")
            admin_filter.click()
            time.sleep(1)

            self.capture(
                "step34-filtered-by-admin.png",
                "Usuarios filtrados por Admin",
                "La tabla muestra √∫nicamente los usuarios con rol de Administrador."
            )

            # Resetear filtro
            role_filter.click()
            all_option = self.driver.find_element(By.XPATH, "//option[@value='']")
            all_option.click()
            time.sleep(1)

        except Exception as e:
            print(f"‚ö†Ô∏è  No se encontr√≥ filtro de rol: {str(e)}")

    def final_overview(self):
        """Vista final del m√≥dulo"""
        print("\nüìä === PASO 10: VISTA FINAL COMPLETA ===\n")

        self.driver.execute_script("window.scrollTo(0, 0)")
        time.sleep(1)

        self.capture(
            "step35-final-users-overview.png",
            "Vista final del m√≥dulo de usuarios",
            "Vista completa del m√≥dulo de Gesti√≥n de Usuarios despu√©s de realizar todas las operaciones: crear, editar, cambiar estado, bloquear y filtrar usuarios."
        )

    def save_documentation(self):
        """Guarda la documentaci√≥n en JSON"""
        doc_file = os.path.join(SCREENSHOT_DIR, "user-management-documentation.json")

        documentation = {
            "module": "Gesti√≥n de Usuarios",
            "total_steps": len(self.screenshots),
            "description": "Documentaci√≥n completa del m√≥dulo de Gesti√≥n de Usuarios incluyendo todas las operaciones CRUD y cambios de estado",
            "steps": self.screenshots
        }

        with open(doc_file, 'w', encoding='utf-8') as f:
            json.dump(documentation, f, indent=2, ensure_ascii=False)

        print(f"\nüíæ Documentaci√≥n guardada: {doc_file}")

    def run(self):
        """Ejecuta el flujo completo de documentaci√≥n"""
        try:
            print("="*80)
            print("üöÄ DOCUMENTACI√ìN COMPLETA DEL M√ìDULO DE GESTI√ìN DE USUARIOS")
            print("="*80)

            self.login()
            self.navigate_to_users()
            self.create_new_user_flow()
            self.search_user_flow()
            self.edit_user_flow()
            self.change_user_status_flow()
            self.block_user_flow()
            self.view_user_details_flow()
            self.filter_by_role_flow()
            self.final_overview()

            self.save_documentation()

            # Resumen final
            total_size = sum(float(s['size'].replace(' KB', '')) for s in self.screenshots)
            print("\n" + "="*80)
            print("‚úÖ DOCUMENTACI√ìN COMPLETADA")
            print("="*80)
            print(f"üìä Total de pasos documentados: {len(self.screenshots)}")
            print(f"üíæ Tama√±o total: {total_size:.1f} KB ({total_size/1024:.2f} MB)")
            print(f"üìÅ Directorio: {SCREENSHOT_DIR}")
            print("\nüìù Operaciones documentadas:")
            print("   ‚úÖ Login al sistema")
            print("   ‚úÖ Navegaci√≥n al m√≥dulo")
            print("   ‚úÖ Crear nuevo usuario")
            print("   ‚úÖ Buscar usuarios")
            print("   ‚úÖ Editar usuario existente")
            print("   ‚úÖ Cambiar estado a INACTIVE")
            print("   ‚úÖ Bloquear usuario (BLOCKED)")
            print("   ‚úÖ Ver detalles de usuario")
            print("   ‚úÖ Filtrar por rol")
            print("   ‚úÖ Vista general final")

        finally:
            self.driver.quit()

if __name__ == "__main__":
    documenter = UserManagementDocumentation()
    documenter.run()
    print("\nüéâ ¬°Proceso de documentaci√≥n completado!")

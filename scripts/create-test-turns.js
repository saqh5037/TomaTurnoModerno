// scripts/create-test-turns.js
import prisma from '../lib/prisma.js';

const firstNames = [
  'Mar√≠a', 'Jos√©', 'Ana', 'Luis', 'Carlos', 'Rosa', 'Pedro', 'Carmen',
  'Miguel', 'Laura', 'Fernando', 'Patricia', 'Roberto', 'Sof√≠a', 'Diego',
  'Alejandra', 'Ricardo', 'Valentina', 'Javier', 'Isabel'
];

const lastNames = [
  'Garc√≠a', 'Rodr√≠guez', 'Mart√≠nez', 'L√≥pez', 'Gonz√°lez', 'Hern√°ndez',
  'P√©rez', 'S√°nchez', 'Ram√≠rez', 'Torres', 'Flores', 'Rivera',
  'G√≥mez', 'D√≠az', 'Cruz', 'Morales', 'Reyes', 'Guti√©rrez', 'Jim√©nez', 'Ruiz'
];

const studies = [
  'Hemograma completo',
  'Qu√≠mica sangu√≠nea',
  'Perfil lip√≠dico',
  'Glucosa en ayunas',
  'Pruebas de funci√≥n hep√°tica',
  'Pruebas de funci√≥n renal',
  'Electrolitos s√©ricos',
  'Hormona estimulante de tiroides (TSH)',
  'Tiempo de protrombina',
  'Biometr√≠a hem√°tica',
  'Examen general de orina',
  'Cultivo de sangre',
  'Prote√≠na C reactiva',
  'Velocidad de sedimentaci√≥n globular',
  '√Åcido √∫rico'
];

async function createTestTurns() {
  console.log('üîÑ Creando 20 turnos de prueba...');
  
  const turns = [];
  
  for (let i = 0; i < 20; i++) {
    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];
    const lastName1 = lastNames[Math.floor(Math.random() * lastNames.length)];
    const lastName2 = lastNames[Math.floor(Math.random() * lastNames.length)];
    const fullName = `${firstName} ${lastName1} ${lastName2}`;
    
    const age = Math.floor(Math.random() * 60) + 18; // Entre 18 y 78 a√±os
    const gender = Math.random() > 0.5 ? 'M' : 'F';
    const selectedStudies = [];
    const numStudies = Math.floor(Math.random() * 3) + 1; // Entre 1 y 3 estudios
    
    for (let j = 0; j < numStudies; j++) {
      const study = studies[Math.floor(Math.random() * studies.length)];
      if (!selectedStudies.includes(study)) {
        selectedStudies.push(study);
      }
    }
    
    const tubesRequired = Math.floor(Math.random() * 4) + 1; // Entre 1 y 4 tubos
    const phoneNumber = `55${Math.floor(Math.random() * 90000000) + 10000000}`;
    
    const observations = Math.random() > 0.7 ? 
      ['Paciente en ayunas', 'Paciente diab√©tico', 'Al√©rgico al l√°tex', 'Requiere atenci√≥n especial'][Math.floor(Math.random() * 4)] : 
      null;
    
    const clinicalInfo = Math.random() > 0.6 ?
      ['Hipertensi√≥n arterial', 'Diabetes mellitus tipo 2', 'Hipotiroidismo', 'Enfermedad renal cr√≥nica'][Math.floor(Math.random() * 4)] :
      null;
    
    const turnData = {
      patientName: fullName,
      age: age,
      gender: gender,
      contactInfo: phoneNumber,
      studies: selectedStudies.join(', '),
      tubesRequired: tubesRequired,
      observations: observations,
      clinicalInfo: clinicalInfo,
      status: 'Pending',
      assignedTurn: i + 1,
      tipoAtencion: Math.random() > 0.8 ? 'Especial' : 'General',
      isCalled: false
    };
    
    turns.push(turnData);
  }
  
  try {
    // Crear todos los turnos
    const createdTurns = await prisma.turnRequest.createMany({
      data: turns
    });
    
    console.log(`‚úÖ Se crearon ${createdTurns.count} turnos exitosamente`);
    
    // Mostrar resumen
    const summary = await prisma.turnRequest.count({
      where: {
        status: 'Pending'
      }
    });
    
    console.log(`üìä Total de turnos pendientes: ${summary}`);
    
  } catch (error) {
    console.error('‚ùå Error al crear turnos:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar la funci√≥n
createTestTurns();
require('dotenv').config({ path: '.env.local' });
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// Nombres de pacientes ficticios
const firstNames = [
  'Mar√≠a', 'Jos√©', 'Ana', 'Carlos', 'Luisa', 'Miguel', 'Carmen', 'Francisco', 
  'Elena', 'Antonio', 'Isabel', 'Manuel', 'Rosa', 'David', 'Pilar', 'Juan',
  'Dolores', 'Javier', 'Mercedes', 'Rafael', 'Concepci√≥n', 'Daniel', 'Josefa',
  'Alejandro', 'Francisca', 'Adri√°n', 'Antonia', 'Fernando', 'Teresa', 'Diego',
  'Patricia', 'Roberto', 'Cristina', 'Eduardo', 'Beatriz', '√Ångel', 'Roc√≠o',
  'Sergio', 'Nuria', 'Pablo', 'Silvia', 'Rub√©n', 'Montserrat', '√Ålvaro',
  'Gloria', 'V√≠ctor', 'Esperanza', 'Ra√∫l', 'Amparo', 'Gonzalo'
];

const lastNames = [
  'Garc√≠a', 'Gonz√°lez', 'Rodr√≠guez', 'Fern√°ndez', 'L√≥pez', 'Mart√≠nez', 'S√°nchez',
  'P√©rez', 'G√≥mez', 'Mart√≠n', 'Jim√©nez', 'Ruiz', 'Hern√°ndez', 'D√≠az', 'Moreno',
  'Mu√±oz', '√Ålvarez', 'Romero', 'Alonso', 'Guti√©rrez', 'Navarro', 'Torres',
  'Dom√≠nguez', 'V√°zquez', 'Ramos', 'Gil', 'Ram√≠rez', 'Serrano', 'Blanco', 'Su√°rez',
  'Castro', 'Ortega', 'Delgado', 'Herrera', 'Pe√±a', 'Guerrero', 'Mendoza',
  'Aguilar', 'Flores', 'Le√≥n', 'Vega', 'Cabrera', 'Reyes', 'Cruz', 'Molina'
];

// Tipos de estudios m√©dicos
const studiesTypes = [
  'Biometr√≠a Hem√°tica Completa',
  'Qu√≠mica Sangu√≠nea 24 elementos',
  'Perfil Lip√≠dico',
  'Glucosa en ayunas',
  'Hemoglobina Glicosilada',
  'Perfil Tiroideo',
  'Examen General de Orina',
  'Perfil Hep√°tico',
  'Perfil Renal',
  'Marcadores Tumorales',
  'Perfil Card√≠aco',
  'Electrolitos S√©ricos',
  'Prote√≠na C Reactiva',
  'Factor Reumatoide',
  'Antiestreptolisinas',
  'Cultivo de Orina',
  'Coproparasitosc√≥pico',
  'VDRL',
  'VIH',
  'Hepatitis B y C',
  '√Åcido √örico',
  'Triglic√©ridos',
  'Colesterol Total',
  'HDL y LDL',
  'Tiempo de Protrombina',
  'Fibrin√≥geno',
  'D√≠mero D',
  'PCR Cuantitativa',
  'Vitamina D',
  'Vitamina B12'
];

// Generar nombre aleatorio
function generateRandomName() {
  const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];
  const lastName1 = lastNames[Math.floor(Math.random() * lastNames.length)];
  const lastName2 = lastNames[Math.floor(Math.random() * lastNames.length)];
  return `${firstName} ${lastName1} ${lastName2}`;
}

// Generar g√©nero basado en el nombre
function getGenderFromName(name) {
  const femaleNames = ['Mar√≠a', 'Ana', 'Luisa', 'Carmen', 'Elena', 'Isabel', 'Rosa', 'Pilar', 'Dolores', 'Mercedes', 'Concepci√≥n', 'Josefa', 'Francisca', 'Antonia', 'Teresa', 'Patricia', 'Cristina', 'Beatriz', 'Roc√≠o', 'Nuria', 'Silvia', 'Montserrat', 'Gloria', 'Esperanza', 'Amparo'];
  const firstName = name.split(' ')[0];
  return femaleNames.includes(firstName) ? 'Femenino' : 'Masculino';
}

// Generar estudios aleatorios
function generateRandomStudies() {
  const numStudies = Math.random() < 0.6 ? 1 : Math.floor(Math.random() * 4) + 1; // 60% una prueba, 40% m√∫ltiples
  const selectedStudies = [];
  
  for (let i = 0; i < numStudies; i++) {
    const study = studiesTypes[Math.floor(Math.random() * studiesTypes.length)];
    if (!selectedStudies.includes(study)) {
      selectedStudies.push(study);
    }
  }
  
  return selectedStudies.join(', ');
}

// Funci√≥n para verificar si es d√≠a h√°bil (lunes a viernes)
function isWeekday(date) {
  const day = date.getDay();
  return day >= 1 && day <= 5; // 1=Lunes, 5=Viernes
}

// Generar tiempo de atenci√≥n realista (en minutos)
function generateAttentionTime() {
  // Distribuci√≥n realista: mayor√≠a entre 8-15 minutos
  const rand = Math.random();
  if (rand < 0.08) return Math.floor(Math.random() * 3) + 5;   // 5-7 min (8% - muy r√°pido)
  if (rand < 0.55) return Math.floor(Math.random() * 6) + 8;   // 8-13 min (47% - normal)
  if (rand < 0.85) return Math.floor(Math.random() * 5) + 14;  // 14-18 min (30% - normal-lento)
  return Math.floor(Math.random() * 7) + 19;                 // 19-25 min (15% - complicado)
}

// Generar variaci√≥n estacional (m√°s pacientes en ciertos meses)
function getSeasonalMultiplier(month) {
  // Enero-Febrero: Alta demanda post-navidad
  // Marzo-Mayo: Demanda normal-alta
  // Junio-Agosto: Demanda normal (vacaciones)  
  // Septiembre-Noviembre: Alta demanda (regreso de vacaciones)
  // Diciembre: Baja demanda (navidad)
  const seasonalFactors = [
    1.15, // Enero - alta
    1.10, // Febrero - alta
    1.05, // Marzo - normal-alta
    1.02, // Abril - normal-alta
    1.00, // Mayo - normal
    0.90, // Junio - baja (vacaciones)
    0.85, // Julio - muy baja (vacaciones)
    0.88, // Agosto - baja (vacaciones)
    1.08, // Septiembre - alta (regreso)
    1.12, // Octubre - alta
    1.06, // Noviembre - normal-alta
    0.80  // Diciembre - muy baja (navidad)
  ];
  
  return seasonalFactors[month - 1];
}

async function seedFullYearData() {
  try {
    console.log('üå± Iniciando generaci√≥n de datos para TODO EL A√ëO 2024...');
    console.log('üìà Rango: 80-120 pacientes por d√≠a h√°bil');

    // Primero, limpiar datos existentes de 2024
    console.log('üßπ Eliminando datos existentes de 2024...');
    const deletedCount = await prisma.turnRequest.deleteMany({
      where: {
        createdAt: {
          gte: new Date(2024, 0, 1),
          lt: new Date(2025, 0, 1)
        }
      }
    });
    console.log(`   Eliminados: ${deletedCount.count} registros anteriores`);

    // Obtener o crear usuarios flebotomistas
    let phlebotomists = await prisma.user.findMany({
      where: { role: 'Flebotomista' }
    });

    // Si no hay suficientes flebotomistas, crear m√°s
    if (phlebotomists.length < 8) {
      console.log('üìã Creando flebotomistas adicionales...');
      
      const phlebotomistData = [
        { username: 'flebotomista1', name: 'Dr. Ana Patricia L√≥pez', role: 'Flebotomista' },
        { username: 'flebotomista2', name: 'Dr. Carlos Eduardo Mart√≠n', role: 'Flebotomista' },
        { username: 'flebotomista3', name: 'Dra. Mar√≠a Isabel Garc√≠a', role: 'Flebotomista' },
        { username: 'flebotomista4', name: 'Dr. Fernando Ruiz Hern√°ndez', role: 'Flebotomista' },
        { username: 'flebotomista5', name: 'Dra. Rosa Elena Jim√©nez', role: 'Flebotomista' },
        { username: 'flebotomista6', name: 'Dr. Miguel √Ångel Torres', role: 'Flebotomista' },
        { username: 'flebotomista7', name: 'Dra. Carmen Dolores Vega', role: 'Flebotomista' },
        { username: 'flebotomista8', name: 'Dr. Roberto Gonz√°lez Silva', role: 'Flebotomista' }
      ];

      for (const phlebData of phlebotomistData) {
        const existing = await prisma.user.findUnique({
          where: { username: phlebData.username }
        });
        
        if (!existing) {
          await prisma.user.create({
            data: {
              ...phlebData,
              password: 'password123'
            }
          });
        }
      }

      phlebotomists = await prisma.user.findMany({
        where: { role: 'Flebotomista' }
      });
    }

    console.log(`üë®‚Äç‚öïÔ∏è Usando ${phlebotomists.length} flebotomistas`);

    // Obtener cub√≠culos existentes
    let cubicles = await prisma.cubicle.findMany();
    if (cubicles.length === 0) {
      console.log('üè• Creando cub√≠culos...');
      
      const cubicleData = [
        { name: 'Cub√≠culo 1', type: 'GENERAL' },
        { name: 'Cub√≠culo 2', type: 'GENERAL' },
        { name: 'Cub√≠culo 3', type: 'GENERAL' },
        { name: 'Cub√≠culo 4', type: 'GENERAL' },
        { name: 'Cub√≠culo 5', type: 'GENERAL' },
        { name: 'Cub√≠culo Especial 1', type: 'SPECIAL', isSpecial: true },
        { name: 'Cub√≠culo Especial 2', type: 'SPECIAL', isSpecial: true }
      ];

      for (const cubData of cubicleData) {
        await prisma.cubicle.create({ data: cubData });
      }

      cubicles = await prisma.cubicle.findMany();
    }

    console.log(`üè• Usando ${cubicles.length} cub√≠culos`);

    // Generar datos para todos los meses de 2024
    let totalRecordsCreated = 0;
    let totalWorkdays = 0;

    const months = [
      { year: 2024, month: 1, name: 'Enero' },
      { year: 2024, month: 2, name: 'Febrero' },
      { year: 2024, month: 3, name: 'Marzo' },
      { year: 2024, month: 4, name: 'Abril' },
      { year: 2024, month: 5, name: 'Mayo' },
      { year: 2024, month: 6, name: 'Junio' },
      { year: 2024, month: 7, name: 'Julio' },
      { year: 2024, month: 8, name: 'Agosto' },
      { year: 2024, month: 9, name: 'Septiembre' },
      { year: 2024, month: 10, name: 'Octubre' },
      { year: 2024, month: 11, name: 'Noviembre' },
      { year: 2024, month: 12, name: 'Diciembre' }
    ];

    for (const { year, month, name } of months) {
      console.log(`\nüìÖ Generando datos para ${name} ${year}...`);
      
      const seasonalMultiplier = getSeasonalMultiplier(month);
      console.log(`   Factor estacional: ${(seasonalMultiplier * 100).toFixed(0)}%`);
      
      const daysInMonth = new Date(year, month, 0).getDate();
      let monthRecords = 0;
      let monthWorkdays = 0;

      for (let day = 1; day <= daysInMonth; day++) {
        const currentDate = new Date(year, month - 1, day);
        
        // Solo generar datos para d√≠as h√°biles
        if (!isWeekday(currentDate)) {
          continue;
        }

        monthWorkdays++;
        totalWorkdays++;

        // Calcular n√∫mero de pacientes para el d√≠a (80-120 base + factor estacional)
        const basePatients = 80 + Math.floor(Math.random() * 41); // 80-120
        const adjustedPatients = Math.round(basePatients * seasonalMultiplier);
        const finalPatients = Math.max(60, Math.min(150, adjustedPatients)); // l√≠mites 60-150

        if (day <= 5 || day % 5 === 0) { // Mostrar progreso cada 5 d√≠as h√°biles
          console.log(`  üìù D√≠a ${currentDate.toLocaleDateString()}: ${finalPatients} pacientes`);
        }

        // Generar horarios de trabajo de 7:00 AM a 4:00 PM
        const workStartHour = 7;
        const workEndHour = 16;
        const workMinutes = (workEndHour - workStartHour) * 60; // 540 minutos

        for (let i = 0; i < finalPatients; i++) {
          // Generar datos del paciente
          const patientName = generateRandomName();
          const gender = getGenderFromName(patientName);
          const age = Math.floor(Math.random() * 65) + 18; // 18-82 a√±os
          const studies = generateRandomStudies();
          const tubesRequired = Math.floor(Math.random() * 5) + 1; // 1-5 tubos
          const attentionTime = generateAttentionTime();

          // Calcular horarios dentro del d√≠a laboral
          const minuteOffset = Math.floor(Math.random() * (workMinutes - 60)); // Dejar margen
          const createdAt = new Date(year, month - 1, day, workStartHour, 0, 0);
          createdAt.setMinutes(createdAt.getMinutes() + minuteOffset);

          // Tiempo entre creaci√≥n y llamada (3-25 minutos)
          const calledAt = new Date(createdAt.getTime() + (Math.floor(Math.random() * 22) + 3) * 60000);
          
          // Tiempo entre llamada e inicio de atenci√≥n (1-8 minutos)
          const attendedAt = new Date(calledAt.getTime() + (Math.floor(Math.random() * 7) + 1) * 60000);
          
          // Tiempo de finalizaci√≥n basado en el tiempo de atenci√≥n
          const finishedAt = new Date(attendedAt.getTime() + attentionTime * 60000);

          // Asignar flebotomista y cub√≠culo aleatoriamente
          const assignedPhlebotomist = phlebotomists[Math.floor(Math.random() * phlebotomists.length)];
          const assignedCubicle = cubicles[Math.floor(Math.random() * cubicles.length)];
          const assignedTurn = Math.floor(Math.random() * 300) + 1; // N√∫mero de turno 1-300

          try {
            await prisma.turnRequest.create({
              data: {
                patientName,
                age,
                gender,
                contactInfo: `555-${Math.floor(Math.random() * 9000) + 1000}`,
                studies,
                tubesRequired,
                observations: Math.random() < 0.25 ? 'Paciente en ayunas' : null,
                clinicalInfo: Math.random() < 0.15 ? ['Diabetes tipo 2', 'Hipertensi√≥n arterial', 'Dislipidemia'][Math.floor(Math.random() * 3)] : null,
                status: 'Completed',
                tipoAtencion: Math.random() < 0.85 ? 'General' : 'Especial',
                assignedTurn,
                isCalled: true,
                createdAt,
                calledAt,
                attendedAt,
                finishedAt,
                attendedBy: assignedPhlebotomist.id,
                cubicleId: assignedCubicle.id,
                updatedAt: finishedAt
              }
            });

            monthRecords++;
          } catch (error) {
            console.error(`‚ùå Error creando registro para ${patientName}:`, error.message);
          }
        }
      }

      console.log(`   ‚úÖ ${name}: ${monthRecords} registros en ${monthWorkdays} d√≠as h√°biles (${Math.round(monthRecords/monthWorkdays)} promedio/d√≠a)`);
      totalRecordsCreated += monthRecords;
    }

    console.log(`\nüéâ ¬°Generaci√≥n completada para todo 2024!`);
    console.log(`üìä Total de registros creados: ${totalRecordsCreated.toLocaleString()}`);
    console.log(`üìÖ Total de d√≠as h√°biles: ${totalWorkdays}`);
    console.log(`üë®‚Äç‚öïÔ∏è Promedio por d√≠a h√°bil: ${Math.round(totalRecordsCreated/totalWorkdays)} pacientes`);
    console.log(`üë®‚Äç‚öïÔ∏è Flebotomistas activos: ${phlebotomists.length}`);
    console.log(`üè• Cub√≠culos disponibles: ${cubicles.length}`);

    // Mostrar resumen por trimestre
    console.log('\nüìà Resumen por trimestre:');
    
    const q1Count = await prisma.turnRequest.count({
      where: {
        status: 'Completed',
        createdAt: {
          gte: new Date(2024, 0, 1),  // Enero 1
          lt: new Date(2024, 3, 1)    // Abril 1
        }
      }
    });

    const q2Count = await prisma.turnRequest.count({
      where: {
        status: 'Completed',
        createdAt: {
          gte: new Date(2024, 3, 1),  // Abril 1
          lt: new Date(2024, 6, 1)    // Julio 1
        }
      }
    });

    const q3Count = await prisma.turnRequest.count({
      where: {
        status: 'Completed',
        createdAt: {
          gte: new Date(2024, 6, 1),  // Julio 1
          lt: new Date(2024, 9, 1)    // Octubre 1
        }
      }
    });

    const q4Count = await prisma.turnRequest.count({
      where: {
        status: 'Completed',
        createdAt: {
          gte: new Date(2024, 9, 1),  // Octubre 1
          lt: new Date(2025, 0, 1)    // Enero 1, 2025
        }
      }
    });

    console.log(`üìä Q1 (Ene-Mar): ${q1Count.toLocaleString()} pacientes`);
    console.log(`üìä Q2 (Abr-Jun): ${q2Count.toLocaleString()} pacientes`);
    console.log(`üìä Q3 (Jul-Sep): ${q3Count.toLocaleString()} pacientes`);
    console.log(`üìä Q4 (Oct-Dic): ${q4Count.toLocaleString()} pacientes`);
    console.log(`üìä Total verificado: ${(q1Count + q2Count + q3Count + q4Count).toLocaleString()} pacientes`);

  } catch (error) {
    console.error('‚ùå Error durante la generaci√≥n de datos:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar el script
if (require.main === module) {
  seedFullYearData();
}

module.exports = { seedFullYearData };
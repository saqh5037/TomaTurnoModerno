require('dotenv').config({ path: '.env.local' });
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// Nombres de pacientes ficticios
const firstNames = [
  'Mar√≠a', 'Jos√©', 'Ana', 'Carlos', 'Luisa', 'Miguel', 'Carmen', 'Francisco', 
  'Elena', 'Antonio', 'Isabel', 'Manuel', 'Rosa', 'David', 'Pilar', 'Juan',
  'Dolores', 'Javier', 'Mercedes', 'Rafael', 'Concepci√≥n', 'Daniel', 'Josefa',
  'Alejandro', 'Francisca', 'Adri√°n', 'Antonia', 'Fernando', 'Teresa', 'Diego'
];

const lastNames = [
  'Garc√≠a', 'Gonz√°lez', 'Rodr√≠guez', 'Fern√°ndez', 'L√≥pez', 'Mart√≠nez', 'S√°nchez',
  'P√©rez', 'G√≥mez', 'Mart√≠n', 'Jim√©nez', 'Ruiz', 'Hern√°ndez', 'D√≠az', 'Moreno',
  'Mu√±oz', '√Ålvarez', 'Romero', 'Alonso', 'Guti√©rrez', 'Navarro', 'Torres',
  'Dom√≠nguez', 'V√°zquez', 'Ramos', 'Gil', 'Ram√≠rez', 'Serrano', 'Blanco', 'Su√°rez'
];

// Tipos de estudios m√©dicos
const studiesTypes = [
  'Biometr√≠a Hem√°tica Completa',
  'Qu√≠mica Sangu√≠nea 24 elementos',
  'Perfil Lip√≠dico',
  'Glucosa en ayunas',
  'Hemoglobina Glicosilada',
  'Perfil Tiroideo',
  'Examen General de Orina',
  'Perfil Hep√°tico',
  'Perfil Renal',
  'Marcadores Tumorales',
  'Perfil Card√≠aco',
  'Electrolitos S√©ricos',
  'Prote√≠na C Reactiva',
  'Factor Reumatoide',
  'Antiestreptolisinas',
  'Cultivo de Orina',
  'Coproparasitosc√≥pico',
  'VDRL',
  'VIH',
  'Hepatitis B y C'
];

// Generar nombre aleatorio
function generateRandomName() {
  const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];
  const lastName1 = lastNames[Math.floor(Math.random() * lastNames.length)];
  const lastName2 = lastNames[Math.floor(Math.random() * lastNames.length)];
  return `${firstName} ${lastName1} ${lastName2}`;
}

// Generar g√©nero basado en el nombre
function getGenderFromName(name) {
  const femaleNames = ['Mar√≠a', 'Ana', 'Luisa', 'Carmen', 'Elena', 'Isabel', 'Rosa', 'Pilar', 'Dolores', 'Mercedes', 'Concepci√≥n', 'Josefa', 'Francisca', 'Antonia', 'Teresa'];
  const firstName = name.split(' ')[0];
  return femaleNames.includes(firstName) ? 'Femenino' : 'Masculino';
}

// Generar estudios aleatorios
function generateRandomStudies() {
  const numStudies = Math.random() < 0.7 ? 1 : Math.floor(Math.random() * 3) + 1; // 70% una prueba, 30% m√∫ltiples
  const selectedStudies = [];
  
  for (let i = 0; i < numStudies; i++) {
    const study = studiesTypes[Math.floor(Math.random() * studiesTypes.length)];
    if (!selectedStudies.includes(study)) {
      selectedStudies.push(study);
    }
  }
  
  return selectedStudies.join(', ');
}

// Funci√≥n para verificar si es d√≠a h√°bil (lunes a viernes)
function isWeekday(date) {
  const day = date.getDay();
  return day >= 1 && day <= 5; // 1=Lunes, 5=Viernes
}

// Generar tiempo de atenci√≥n realista (en minutos)
function generateAttentionTime() {
  // Distribuci√≥n realista: mayor√≠a entre 8-15 minutos
  const rand = Math.random();
  if (rand < 0.1) return Math.floor(Math.random() * 3) + 5;   // 5-7 min (10% - muy r√°pido)
  if (rand < 0.6) return Math.floor(Math.random() * 6) + 8;   // 8-13 min (50% - normal)
  if (rand < 0.9) return Math.floor(Math.random() * 5) + 14;  // 14-18 min (30% - normal-lento)
  return Math.floor(Math.random() * 7) + 19;                 // 19-25 min (10% - complicado)
}

async function seedTestData() {
  try {
    console.log('üå± Iniciando generaci√≥n de datos de prueba...');

    // Primero, obtener o crear usuarios flebotomistas
    let phlebotomists = await prisma.user.findMany({
      where: { role: 'Flebotomista' }
    });

    // Si no hay flebotomistas, crear algunos
    if (phlebotomists.length === 0) {
      console.log('üìã Creando flebotomistas de prueba...');
      
      const phlebotomistData = [
        { username: 'flebotomista1', name: 'Dr. Ana Patricia L√≥pez', role: 'Flebotomista' },
        { username: 'flebotomista2', name: 'Dr. Carlos Eduardo Mart√≠n', role: 'Flebotomista' },
        { username: 'flebotomista3', name: 'Dra. Mar√≠a Isabel Garc√≠a', role: 'Flebotomista' },
        { username: 'flebotomista4', name: 'Dr. Fernando Ruiz Hern√°ndez', role: 'Flebotomista' },
        { username: 'flebotomista5', name: 'Dra. Rosa Elena Jim√©nez', role: 'Flebotomista' }
      ];

      for (const phlebData of phlebotomistData) {
        await prisma.user.create({
          data: {
            ...phlebData,
            password: 'password123' // Password simple para pruebas
          }
        });
      }

      phlebotomists = await prisma.user.findMany({
        where: { role: 'Flebotomista' }
      });
    }

    console.log(`üë®‚Äç‚öïÔ∏è Usando ${phlebotomists.length} flebotomistas existentes`);

    // Obtener cub√≠culos existentes
    let cubicles = await prisma.cubicle.findMany();
    if (cubicles.length === 0) {
      console.log('üè• Creando cub√≠culos de prueba...');
      
      const cubicleData = [
        { name: 'Cub√≠culo 1', type: 'GENERAL' },
        { name: 'Cub√≠culo 2', type: 'GENERAL' },
        { name: 'Cub√≠culo 3', type: 'GENERAL' },
        { name: 'Cub√≠culo Especial 1', type: 'SPECIAL', isSpecial: true },
        { name: 'Cub√≠culo Especial 2', type: 'SPECIAL', isSpecial: true }
      ];

      for (const cubData of cubicleData) {
        await prisma.cubicle.create({ data: cubData });
      }

      cubicles = await prisma.cubicle.findMany();
    }

    console.log(`üè• Usando ${cubicles.length} cub√≠culos existentes`);

    // Generar datos para Noviembre y Diciembre 2024
    const months = [
      { year: 2024, month: 11, name: 'Noviembre' }, // Noviembre
      { year: 2024, month: 12, name: 'Diciembre' }  // Diciembre
    ];

    let totalRecordsCreated = 0;

    for (const { year, month, name } of months) {
      console.log(`\nüìÖ Generando datos para ${name} ${year}...`);
      
      // Obtener n√∫mero de d√≠as en el mes
      const daysInMonth = new Date(year, month, 0).getDate();
      
      let monthRecords = 0;

      for (let day = 1; day <= daysInMonth; day++) {
        const currentDate = new Date(year, month - 1, day);
        
        // Solo generar datos para d√≠as h√°biles (lunes a viernes)
        if (!isWeekday(currentDate)) {
          console.log(`‚è≠Ô∏è  Saltando ${currentDate.toLocaleDateString()} (fin de semana)`);
          continue;
        }

        // Generar entre 35-65 pacientes por d√≠a (promedio ~50)
        const basePatients = 45;
        const variation = Math.floor(Math.random() * 21) - 10; // -10 a +10
        const patientsForDay = Math.max(30, Math.min(70, basePatients + variation));

        console.log(`  üìù Generando ${patientsForDay} pacientes para ${currentDate.toLocaleDateString()}`);

        // Generar horarios de trabajo de 7:00 AM a 4:00 PM
        const workStartHour = 7;
        const workEndHour = 16;
        const workMinutes = (workEndHour - workStartHour) * 60; // 540 minutos

        for (let i = 0; i < patientsForDay; i++) {
          // Generar datos del paciente
          const patientName = generateRandomName();
          const gender = getGenderFromName(patientName);
          const age = Math.floor(Math.random() * 60) + 18; // 18-78 a√±os
          const studies = generateRandomStudies();
          const tubesRequired = Math.floor(Math.random() * 4) + 1; // 1-4 tubos
          const attentionTime = generateAttentionTime();

          // Calcular horarios dentro del d√≠a laboral
          const minuteOffset = Math.floor(Math.random() * (workMinutes - 60)); // Dejar margen para la atenci√≥n
          const createdAt = new Date(year, month - 1, day, workStartHour, 0, 0);
          createdAt.setMinutes(createdAt.getMinutes() + minuteOffset);

          // Tiempo entre creaci√≥n y llamada (5-30 minutos)
          const calledAt = new Date(createdAt.getTime() + (Math.floor(Math.random() * 25) + 5) * 60000);
          
          // Tiempo entre llamada e inicio de atenci√≥n (2-10 minutos)
          const attendedAt = new Date(calledAt.getTime() + (Math.floor(Math.random() * 8) + 2) * 60000);
          
          // Tiempo de finalizaci√≥n basado en el tiempo de atenci√≥n
          const finishedAt = new Date(attendedAt.getTime() + attentionTime * 60000);

          // Asignar flebotomista y cub√≠culo aleatoriamente
          const assignedPhlebotomist = phlebotomists[Math.floor(Math.random() * phlebotomists.length)];
          const assignedCubicle = cubicles[Math.floor(Math.random() * cubicles.length)];
          const assignedTurn = Math.floor(Math.random() * 200) + 1; // N√∫mero de turno 1-200

          try {
            await prisma.turnRequest.create({
              data: {
                patientName,
                age,
                gender,
                contactInfo: `555-${Math.floor(Math.random() * 9000) + 1000}`,
                studies,
                tubesRequired,
                observations: Math.random() < 0.3 ? 'Paciente en ayunas' : null,
                clinicalInfo: Math.random() < 0.2 ? 'Diabetes tipo 2' : null,
                status: 'Completed',
                tipoAtencion: Math.random() < 0.8 ? 'General' : 'Especial',
                assignedTurn,
                isCalled: true,
                createdAt,
                calledAt,
                attendedAt,
                finishedAt,
                attendedBy: assignedPhlebotomist.id,
                cubicleId: assignedCubicle.id,
                updatedAt: finishedAt
              }
            });

            monthRecords++;
          } catch (error) {
            console.error(`‚ùå Error creando registro para ${patientName}:`, error.message);
          }
        }
      }

      console.log(`‚úÖ ${name}: ${monthRecords} registros creados`);
      totalRecordsCreated += monthRecords;
    }

    console.log(`\nüéâ ¬°Generaci√≥n completada!`);
    console.log(`üìä Total de registros creados: ${totalRecordsCreated}`);
    console.log(`üë®‚Äç‚öïÔ∏è Flebotomistas: ${phlebotomists.length}`);
    console.log(`üè• Cub√≠culos: ${cubicles.length}`);

    // Mostrar resumen por mes
    console.log('\nüìà Resumen por mes:');
    
    const novemberCount = await prisma.turnRequest.count({
      where: {
        finishedAt: {
          gte: new Date(2024, 10, 1), // Noviembre 1
          lt: new Date(2024, 11, 1)   // Diciembre 1
        },
        status: 'Completed'
      }
    });

    const decemberCount = await prisma.turnRequest.count({
      where: {
        finishedAt: {
          gte: new Date(2024, 11, 1), // Diciembre 1
          lt: new Date(2025, 0, 1)    // Enero 1
        },
        status: 'Completed'
      }
    });

    console.log(`üìÖ Noviembre 2024: ${novemberCount} pacientes`);
    console.log(`üìÖ Diciembre 2024: ${decemberCount} pacientes`);
    console.log(`üìä Total: ${novemberCount + decemberCount} pacientes`);

  } catch (error) {
    console.error('‚ùå Error durante la generaci√≥n de datos:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar el script
if (require.main === module) {
  seedTestData();
}

module.exports = { seedTestData };